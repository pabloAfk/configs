#pra usar isso, você precisa baixar o wallpaper, e em seguida, ir na pasta .local/share/rice-switcher, e aí adiciona uma pasta lá dentro com o nome que vc quiser
#agora salva o wallpaper dentro dessa pasta que vocẽ acabou de criar como "wallpaper.png" e agora é só aproveitar, cria quantos temas quiser, só repetir esse processo
#tá salvo em ~/.local/bin/rice-switcher.py
#e os wallpapers em ~/.local/share/rice-switcher/as pastas com o nome do tema
# e dentro da pasta com o nome do tema tá o wallpaper chamado de "wallpaper.png"


#!/usr/bin/env python3

import gi
import subprocess
import os

gi.require_version("Gtk", "4.0")
gi.require_version("Adw", "1")
from gi.repository import Gtk, Adw, GLib, GdkPixbuf

class WallpaperSwitcher(Gtk.Application):
    def __init__(self):
        super().__init__(application_id="com.pablo.WallpaperSwitcher")
        self.window = None
        self.theme_dir = os.path.expanduser("~/.local/share/rice-switcher")

    def do_activate(self):
        if not self.window:
            Adw.init()
            self.window = Adw.ApplicationWindow(application=self)
            self.window.set_title("Rice Switcher")
            self.window.set_default_size(400, 300)

            box = Gtk.Box(orientation=Gtk.Orientation.VERTICAL, spacing=10)
            box.set_margin_top(20)
            box.set_margin_bottom(20)
            box.set_margin_start(20)
            box.set_margin_end(20)
            self.window.set_content(box)

            label = Gtk.Label(label="Escolha um tema para aplicar:")
            box.append(label)

            self.listbox = Gtk.ListBox()
            box.append(self.listbox)

            self.status_label = Gtk.Label(label="")
            box.append(self.status_label)

            # Evento pra ativar tema
            self.listbox.connect("row-activated", self.on_row_activated)

            self.load_themes()

        self.window.present()

    def load_themes(self):
        # Limpa a lista
        child = self.listbox.get_first_child()
        while child is not None:
            next_child = child.get_next_sibling()
            self.listbox.remove(child)
            child = next_child

        themes = sorted(os.listdir(self.theme_dir))
        for theme in themes:
            row = Gtk.ListBoxRow()
            hbox = Gtk.Box(orientation=Gtk.Orientation.HORIZONTAL, spacing=10)
            row.set_child(hbox)

            wallpaper_path = os.path.join(self.theme_dir, theme, "wallpaper.png")
            if os.path.exists(wallpaper_path):
                pixbuf = GdkPixbuf.Pixbuf.new_from_file_at_scale(wallpaper_path, 80, 45, True)
                image = Gtk.Image.new_from_pixbuf(pixbuf)
                hbox.append(image)
            else:
                hbox.append(Gtk.Label(label="[No Image]"))

            label = Gtk.Label(label=theme, xalign=0)
            hbox.append(label)

            row.theme_name = theme

            self.listbox.append(row)

    def on_row_activated(self, listbox, row):
        theme = getattr(row, "theme_name", None)
        if theme is None:
            self.status_label.set_text("Erro: tema não encontrado!")
            return

        wallpaper = os.path.join(self.theme_dir, theme, "wallpaper.png")
        if not os.path.exists(wallpaper):
            self.status_label.set_text("Wallpaper não encontrado!")
            return

        self.status_label.set_text(f"Aplicando {theme}...")

        subprocess.Popen([
            "swww", "img", wallpaper,
            "--transition-type", "grow",
            "--transition-fps", "60",
            "--transition-duration", "1"
        ])

        subprocess.Popen(["wal", "-i", wallpaper, "-n"])

        subprocess.Popen(["pkill", "cava"])
        subprocess.Popen(["nohup", "cava", "&>/dev/null", "&"], shell=True)

        GLib.timeout_add_seconds(2, self.clear_status)

    def clear_status(self):
        self.status_label.set_text("")
        return False

app = WallpaperSwitcher()
app.run()
